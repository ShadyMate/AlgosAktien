Aufwand einer Hashtabelle normalerweise:
Einfügen: O(1), bei 1000 Akten also 1000 Operationen
Suchen: O(1), -.-
Löschen: O(1), -.-

Aufwand eines Arrays:
Einfügen:
 - am Anfang: O(1)
 - beliebige Position: O(n), bei 1000 also bis zu 500.000 Operationen
Suchen: O(n), bei 1000 also bis zu 500.000 Operationen
Löschen:
O(n), bei 1000 also bis zu 500.000 Operationen

Aufwand einer verketteten Liste:
Einfügen:
 - am Anfang: O(1)
 - beliebige Position: O(n), bei 1000 also bis zu 500.000 Operationen
Suchen: O(n), bei 1000 also bis zu 500.000 Operationen
Löschen: O(n), bei 1000 also bis zu 500.000 Operationen

Schleifen: Das Programm enthält keine expliziten Schleifen, die von der Größe der Eingabe abhängen.
Daher gibt es keine linearen oder quadratischen Iterationen.

E/A-Operationen (cin, cout): Die Laufzeitkomplexität von E/A-Operationen kann oft als konstant angenommen werden,
da sie nicht linear mit der Größe des Inputs skalieren.

Hashtabellenoperationen: Die Laufzeitkomplexität von Hashtabellenoperationen hängt von der Implementierung ab.
Das Einfügen, Löschen und Suchen in einer Hashtabelle hat im Durchschnitt eine O(1) Komplexität, jedoch im schlechtesten Fall O(n),
wobei n die Anzahl der Elemente in der Hashtabelle ist.

Rekursion: Es gibt keine rekursiven Funktionen im Programm.

Dynamische Speicherzuweisung: Es gibt eine dynamische Speicherzuweisung im Hauptteil des Programms,
die jedoch nur einmal durchgeführt wird und nicht von der Größe des Inputs abhängt.

Daher kann die Gesamtkomplexität des Programms als O(1) betrachtet werden,
da die Hauptoperationen (E/A, Hashtabellenoperationen) in der Regel konstante Laufzeiten haben und nicht von der Größe des Inputs abhängen.